
import numpy as np
import matplotlib.pyplot as plt

# --- パラメータ設定 ---
gamma = 2.0
beta = 0.985 ** 20
r = 1.025 ** 20 - 1.0
l = np.array([0.8027, 1.0, 1.2457])  # 生産性タイプ：low, mid, high
NL = len(l)
y = np.array([1.0, 1.2, 0.0])  # 年金なし → 老年期所得 = 0

# --- 資産グリッド ---
a_l = 0.0
a_u = 2.0
NA = 100
a = np.linspace(a_l, a_u, NA)

# --- 効用関数 ---
def util(c, gamma):
   return (c**(1 - gamma)) / (1 - gamma) if gamma != 1 else np.log(c)

# 初期化
v = np.zeros((3, NA, NL))
iaplus = np.zeros((3, NA, NL), dtype=int)
aplus = np.zeros((3, NA, NL))

# --- 期間3（老年期）: 所得は年金がないため0 ---
for ia in range(NA):
    c = (1.0 + r) * a[ia] + y[2]
    v[2, ia, :] = util(np.maximum(c, 1e-8), gamma)

# --- 期間2（中年期）---
for il in range(NL):
    for ia in range(NA):
        reward = np.full(NA, -np.inf)
        for iap in range(NA):
            c = l[il] + (1.0 + r) * a[ia] - a[iap]
            if c > 0:
                reward[iap] = util(c, gamma) + beta * v[2, iap, il]
        i_star = np.argmax(reward)
        v[1, ia, il] = reward[i_star]
        iaplus[1, ia, il] = i_star
        aplus[1, ia, il] = a[i_star]

# --- 期間1（若年期）---
for il in range(NL):
    for ia in range(NA):
        reward = np.full(NA, -np.inf)
        for iap in range(NA):
            EV = v[1, iap, il]  # 簡略化：遷移行列使わず固定
            c = l[il] + (1.0 + r) * a[ia] - a[iap]
            if c > 0:
                reward[iap] = util(c, gamma) + beta * EV
        i_star = np.argmax(reward)
        v[0, ia, il] = reward[i_star]
        iaplus[0, ia, il] = i_star
        aplus[0, ia, il] = a[i_star]

# --- グラフ描画：若年期の貯蓄政策関数（a1 → a2）---
plt.figure(figsize=(8, 6))
labels = ['Low productivity', 'Mid productivity', 'High productivity']
markers = ['o', 's', '^']
for il in range(NL):
    plt.plot(a, aplus[0, :, il], label=labels[il], marker=markers[il], markevery=10)

plt.xlabel("若年期期初の資産 a₁（利子を除く）", fontsize=12)
plt.ylabel("中年期期初の資産 a₂（利子を除く）", fontsize=12)
plt.title("貯蓄政策関数（年金なし）", fontsize=14)
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
